
FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	NF : REAL;
	NM : REAL;
	//NTop : REAL;
	NLeaf : REAL;
	DTMax : REAL;
	CogC : REAL;
//	FEX : REAL;
	FoC : REAL;
//	SCDF : REAL;
//	MCDF : REAL;
	RDEn : REAL;
	RoV : REAL;
//	NVC : REAL;
//	NGOr : REAL;
//	NGXOr : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	MIFM : REAL;
END_VAR

FUZZIFY NF // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (2.5, 1) (27.5, 0); 
	TERM med := (2.5,0) (27.5, 1) (52.5, 0);
	TERM high := (27.5, 0) (52.5, 1) (100, 1);
END_FUZZIFY

FUZZIFY NM // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.5, 1) (7.5, 0) ; 
	TERM med := (0.5, 0) (7.5, 1) (15.5, 0);
	TERM high := (7.5, 0) (15.5, 1) (100,1);
END_FUZZIFY

//FUZZIFY NTop // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY


FUZZIFY NLeaf // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (1, 1) (19, 0) ; 
	TERM med := (1, 0) (19, 1) (37, 0);
	TERM high := (19, 0) (37, 1) (100, 1);
END_FUZZIFY

FUZZIFY DTMax // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (2, 1) (4, 0) ; 
	TERM med := (2, 0) (4, 1) (6, 0);
	TERM high := (4, 0) (6, 1) (50, 1);
END_FUZZIFY

FUZZIFY CogC // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0, 1) (4.5, 0) ; 
	TERM med := (0, 0) (4.5, 1) (9.5, 0);
	TERM high := (4.5, 0) (9.5, 1) (10, 1);
END_FUZZIFY

//FUZZIFY FEX // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY

FUZZIFY FoC // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0, 1) (0.24, 0) ; 
	TERM med := (0, 0) (0.24, 1) (0.48, 0);
	TERM high := (0.24, 0) (0.48, 1) (1, 1);
END_FUZZIFY

//FUZZIFY SCDF // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY

//FUZZIFY MCDF // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY

FUZZIFY RDEn // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (0.7, 1) (1.3, 0) ; 
	TERM med := (0.7, 0) (1.3, 1) (1.9, 0);
	TERM high := (1.3, 0) (1.9, 1) (10,1);
END_FUZZIFY

FUZZIFY RoV // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 1) (1, 1) (3, 0) ; 
	TERM med := (1, 0) (3, 1) (5, 0);
	TERM high := (3, 0) (5, 1) (10, 1);
END_FUZZIFY

//FUZZIFY NVC // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY

//FUZZIFY NGOr // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY

//FUZZIFY NGXOr // Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
//	TERM low := (0, 1) (1, 1) (19, 0) ; 
//	TERM med := (1, 0) (19, 1) (37, 0);
//	TERM high := (19, 0) (37, 1) (100, 1);
//END_FUZZIFY



DEFUZZIFY MIFM			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	
	TERM verylow := (0,1) (9,1) (10,0);
	TERM low := (10,0) (17.5, 1) (25,0);
	TERM med := (25,0) (32.5, 1) (40,0);
	TERM high := (40,0) (47.5, 1) (55,0);
	TERM veryhigh := (55,0) (56,1) (100,1);


	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF NM IS low AND FoC IS low AND NF IS low THEN MIFM IS low;
	RULE 2 : IF NM IS low AND FoC IS med AND NF IS low THEN MIFM IS med;
	RULE 3 : IF NM IS low AND FoC IS med AND NF IS med THEN MIFM IS med;
	RULE 4 : IF NM IS low AND FoC IS high AND NF IS low THEN MIFM IS veryhigh;
	RULE 5 : IF NM IS low AND FoC IS high AND NF IS med THEN MIFM IS veryhigh;
	RULE 6 : IF NM IS low AND FoC IS high AND NF IS high THEN MIFM IS veryhigh;
	RULE 7 : IF NM IS med AND FoC IS low AND NF IS low THEN MIFM IS low;
	RULE 8 : IF NM IS med AND FoC IS low AND NF IS med THEN MIFM IS low;
	RULE 9 : IF NM IS med AND FoC IS med AND NF IS low THEN MIFM IS med;
	RULE 10 : IF NM IS med AND FoC IS med AND NF IS med THEN MIFM IS med;
	RULE 11 : IF NM IS med AND FoC IS high AND NF IS low THEN MIFM IS med;
	RULE 12 : IF NM IS med AND FoC IS high AND NF IS med THEN MIFM IS high;
	RULE 13 : IF NM IS med AND FoC IS high AND NF IS high THEN MIFM IS high;
	RULE 14 : IF NM IS high AND FoC IS low AND NF IS low THEN MIFM IS verylow;
	RULE 15 : IF NM IS high AND FoC IS low AND NF IS med THEN MIFM IS verylow;
	RULE 16 : IF NM IS high AND FoC IS low AND NF IS high THEN MIFM IS verylow;
	RULE 17 : IF NM IS high AND FoC IS med AND NF IS low THEN MIFM IS med;
	RULE 18 : IF NM IS high AND FoC IS med AND NF IS med THEN MIFM IS med;
	RULE 19 : IF NM IS high AND FoC IS med AND NF IS high THEN MIFM IS med;
	RULE 20 : IF NM IS high AND FoC IS high AND NF IS low THEN MIFM IS high;
	RULE 21 : IF NM IS high AND FoC IS high AND NF IS med THEN MIFM IS high;
	RULE 22 : IF NM IS high AND FoC IS high AND NF IS high THEN MIFM IS high;


END_RULEBLOCK

RULEBLOCK No2
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

		RULE 1 : IF DTMax IS low AND NLeaf IS low AND NF IS low THEN MIFM IS verylow;
		RULE 2 : IF DTMax IS med AND NLeaf IS low AND NF IS low THEN MIFM IS low;
		RULE 3 : IF DTMax IS low AND NLeaf IS med AND NF IS low THEN MIFM IS low;
		RULE 4 : IF DTMax IS low AND NLeaf IS low AND NF IS med THEN MIFM IS low;
		RULE 4 : IF DTMax IS high AND NLeaf IS low AND NF IS low THEN MIFM IS low;
		RULE 6 : IF DTMax IS low AND NLeaf IS med AND NF IS med THEN MIFM IS med;
		RULE 7 : IF DTMax IS med AND NLeaf IS low AND NF IS med THEN MIFM IS med;
		RULE 8 : IF DTMax IS med AND NLeaf IS med AND NF IS med THEN MIFM IS med;
		RULE 9 : IF DTMax IS high AND NLeaf IS med AND NF IS med THEN MIFM IS med;
		RULE 10 : IF DTMax IS med AND NLeaf IS high AND NF IS med THEN MIFM IS high;
		RULE 11 : IF DTMax IS med AND NLeaf IS high AND NF IS high THEN MIFM IS high;
		RULE 10 : IF DTMax IS high AND NLeaf IS high AND NF IS high THEN MIFM IS veryhigh;

END_RULEBLOCK

RULEBLOCK No3
//	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF RDEn IS low AND RoV IS low AND CogC IS low THEN MIFM IS veryhigh;
	RULE 2 : IF RDEn IS low AND RoV IS low AND CogC IS med THEN MIFM IS high;
	RULE 3 : IF RDEn IS low AND RoV IS low AND CogC IS high THEN MIFM IS med;
	RULE 4 : IF RDEn IS low AND RoV IS med AND CogC IS low THEN MIFM IS high;
	RULE 5 : IF RDEn IS low AND RoV IS med AND CogC IS med THEN MIFM IS high;
	RULE 6 : IF RDEn IS low AND RoV IS med AND CogC IS high THEN MIFM IS med;
	RULE 7 : IF RDEn IS low AND RoV IS high AND CogC IS low THEN MIFM IS med;
	RULE 8 : IF RDEn IS low AND RoV IS high AND CogC IS med THEN MIFM IS med;
	RULE 9 : IF RDEn IS low AND RoV IS high AND CogC IS high THEN MIFM IS low;
	RULE 10 : IF RDEn IS med AND RoV IS low AND CogC IS low THEN MIFM IS high;
	RULE 11 : IF RDEn IS med AND RoV IS low AND CogC IS med THEN MIFM IS med;
	RULE 12 : IF RDEn IS med AND RoV IS low AND CogC IS high THEN MIFM IS med;
	RULE 13 : IF RDEn IS med AND RoV IS med AND CogC IS low THEN MIFM IS med;
	RULE 14 : IF RDEn IS med AND RoV IS med AND CogC IS med THEN MIFM IS med;
	RULE 15 : IF RDEn IS med AND RoV IS med AND CogC IS high THEN MIFM IS med;
	RULE 16 : IF RDEn IS med AND RoV IS high AND CogC IS low THEN MIFM IS med;
	RULE 17 : IF RDEn IS med AND RoV IS high AND CogC IS med THEN MIFM IS med;
	RULE 18 : IF RDEn IS med AND RoV IS high AND CogC IS high THEN MIFM IS verylow;
	RULE 19 : IF RDEn IS high AND RoV IS low AND CogC IS low THEN MIFM IS med;
	RULE 20 : IF RDEn IS high AND RoV IS low AND CogC IS med THEN MIFM IS med;
	RULE 21 : IF RDEn IS high AND RoV IS low AND CogC IS high THEN MIFM IS med;
	RULE 22 : IF RDEn IS high AND RoV IS med AND CogC IS low THEN MIFM IS med;
	RULE 23 : IF RDEn IS high AND RoV IS med AND CogC IS med THEN MIFM IS low;
	RULE 24 : IF RDEn IS high AND RoV IS med AND CogC IS high THEN MIFM IS low;
	RULE 25 : IF RDEn IS high AND RoV IS high AND CogC IS low THEN MIFM IS low;
	RULE 26 : IF RDEn IS high AND RoV IS high AND CogC IS med THEN MIFM IS verylow;
	RULE 27 : IF RDEn IS high AND RoV IS high  AND CogC IS high THEN MIFM IS verylow;

END_RULEBLOCK

END_FUNCTION_BLOCK

